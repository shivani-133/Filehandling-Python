# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xd-2f_XHlZPHYozK3nJUOc3uXOJhlL1o
"""

f=open("myfile.txt","x")

f=open("myfile.txt","w")
f.write("today im studing flie handling in python.")
f.close()

f=open("myfile.txt","r")
print(f.read())

f=open("myfile.txt","w")
f.write("i want to built my career in data science \n i want to become a data analyst")
f.close()

f=open("myfile.txt","r")
print(f.readline())

f=open("myfile.txt","r")
print(f.read())

f=open("myfile.txt","r")
print(f.read(5))

f=open("myfile.txt","r")
for i in f:
  print(i)

f=open("myfile.txt","w")
f.write("myself shiv ,i think i have deleted the file \n")
f.close()

f=open("myfile.txt","r")
print(f.read())

f=open("myfile.txt","a")
f.write('hoorey,added  the content')
f.close()

f=open("myfile.txt","r")
print(f.read())

f=open("myfile.txt","w")
l=['hello\n','hi\n','how are you\n','i am fine']
f.writelines(l)
f.close()

f=open("myfile.txt","r")
print(f.read())

import os
os.remove("myfile.txt")

import os

if os.path.exists("myfile.txt"):
  os.remove("myfile.txt")
else:
  print("the file doesnt exists")

#to delete entire folder
#os.rmdir(".......")

#using with
with open('myfile1.txt','w') as f:
  f.write("shivani is a brave girl")

with open('myfile1.txt','r') as f:
  print(f.read())

with open('myfile1.txt','r') as f:
  print(f.read(2))
  print(f.read(1))

bigl=['hello world' for i in range(100)]
with open('bigl.txt','w') as f:
  f.writelines(bigl)

#with chunks
with open('bigl.txt','r') as f:
  chunksize=10
  while len(f.read(chunksize))>0:
    print(f.read(chunksize),end="*")
    f.read(chunksize)

#seek and tell function
with open("myfile1.txt",'r') as f:
  print(f.read(10))
  print(f.tell())
  f.seek(0)
  print(f.read(15))

#seek during write
with open('myfile1.txt','w') as f:
  f.write('hello')
  f.seek(0)
  f.write('x')
with open('myfile1.txt','r') as f:
  print(f.read())

#working with binary file
with open('roadmap.png','rb') as f:
  with open('roadmap1.png','wb') as wf:
    wf.write(f.read())

#working with integers
with open('myfile1.txt','w') as f:
  f.write('5')
with open('myfile1.txt','r') as f:
  print(int(f.read())+5)
# as it only takes string format

#complex data(write)
d={
    'name':'shivani',
    'age':21,
    'gender':'female'
}
with open('sample.txt','w') as f:
  f.write(str(d))

with open('sample.txt','r') as f:
  print(f.read())

#serialization(dict)
import json

d={
    'name':'shivani',
    'age':21,
    'gender':'female'
}
with open('demo.json','w') as f:
  json.dump(d,f)

d={
    'name':'shivani',
    'age':21,
    'gender':'female'
}
with open('demo.json','w') as f:
  json.dump(d,f,indent=5)

#deserialization(dict)
import json

with open('demo.json','r') as f:
  d=json.load(f)
  print(d)
  print(type(d))

#serilization(tuple)
# if u dump a tuple it will give list,if u deserialize also it will give list only,you dont get tuple
t=(1,2,3,4,5)
with open('demo.json','w') as f:
  json.dump(t,f)

#serialization of custom objects
class Person:
  def __init__(self,fname,lname,age,gender):
    self.fname=fname
    self.lname=lname
    self.age=age
    self.gender=gender

person=Person('shivani','peta',21,'female')

import json
def show_object(person):
  if isinstance(person,Person):
    return {'name':person.fname+' '+person.lname,'age':person.age,'gender':person.gender}



with open('demo.json','w') as f:
  json.dump(person,f,default=show_object,indent=4)

#deserialization of custom objects
import json
with open('demo.json','r') as f:
  print(json.load(f))

#pickling=the process where a python object hierarchy is converted to byte stream
#unpickling=the process where a byte stream is converted to byte stream

import pickle

class Person1:
  def __init__(self,name,age):
    self.name=name
    self.age=age
  def display_info(self):
    print('hi my name is',self.name,'and i am',self.age,'years old')

p = Person1('Shivani', 21)

import pickle
with open('Person.pkl','wb') as f:
  pickle.dump(p,f)

#unpickling
with open('Person.pkl','rb') as f:
  p=pickle.load(f)
p.display_info()